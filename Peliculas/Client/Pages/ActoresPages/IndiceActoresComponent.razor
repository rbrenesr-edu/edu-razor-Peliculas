@page "/actores"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject SweetAlertService swal

<h3>IndiceActoresComponent</h3>

<div class="mb-3">
    <a href="actores/crear" class="btn btn-info">Crear Actor</a>
</div>

<ListadoGenericoComponent Listado="Actores">
    <HayRegistrosCompleto>
        <table class="table table-strriped">
            <thead>
                <tr>
                    <th></th>
                    <th>Nombre</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Actores!)
                {
                    <tr>
                        <td>
                            <a href="actores/editar/@item.Id" class="btn btn-success">E</a>
                            <button class="btn btn-danger" @onclick=@(()=> Borrar(item))>D</button>
                        </td>
                        <td>
                            @item.Nombre
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </HayRegistrosCompleto>
</ListadoGenericoComponent>

@code {
    private List<Actor>? Actores { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Cargar();
    }

    private async Task Cargar()
    {
        var respuesta = await repositorio.Get<List<Actor>>("api/actores");
        Actores = respuesta.Response!;
    }

    private async Task Borrar(Actor actor)
    {
        var responseHttp = await repositorio.Delete($"api/actores/{actor.Id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage!.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHttp.ObtenerMensajeError();
                await swal.FireAsync("Erro", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Cargar();
        }

    }
}
