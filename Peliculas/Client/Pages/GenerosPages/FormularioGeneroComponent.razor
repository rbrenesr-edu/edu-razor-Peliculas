@inject SweetAlertService swal;

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>


@* <EditForm Model="Genero" OnSubmit="Crear"> *@
<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label class="form-label">Nombre</label>
        <InputText class="form-control" @bind-Value="@Genero.Nombre" />
        <ValidationMessage For="@( ()=> Genero.Nombre )" />
    </div>

    <button class="btn btn-success" type="submit">Guardar Cambios</button>
</EditForm>
<h3>FormularioGeneroComponent</h3>

@code {
    [EditorRequired]
    [Parameter]
    public Genero Genero { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    public bool isTheFormProcessedSuccessfully { get; set; } = false;

    private EditContext editContext = null!;




    protected override void OnInitialized()
    {
        editContext = new(Genero);
    }


    private async Task OnBeforeInternalNavigation(LocationChangingContext contex)
    {
        var isFormModified = editContext.IsModified();

        if (!isFormModified)
        {
            return;
        }

        if (isTheFormProcessedSuccessfully)
        {
            return;
        }


        var resultado = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "Deseas abandonar la página y perder los cambios ? ",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirmando = !string.IsNullOrEmpty(resultado.Value);


        if (confirmando)
        {
            return;
        }

        contex.PreventNavigation();
    }

}
