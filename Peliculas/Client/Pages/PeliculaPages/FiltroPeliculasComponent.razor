@page "/peliculas/buscar";
@inject IRepositorio repositorio;
@inject NavigationManager navigationManager

<h3>FiltroPeliculasComponent</h3>

<div class="row g-3 align-items-center mb-3">

    <div class="col-sm-3">

        <input type="text"
               class="form-control"
               id="titulo"
               placeholder="Título Película"
               autocomplete="false"
        @bind-value="titulo"
        @bind-value:event="oninput"
        @onkeypress="@( (KeyboardEventArgs e)=> TituloKeyPress(e))" />
    </div>

    <div class="col-sm-3">
        <select class="form-select" @bind="generoSeleccionado">
            <option value="0">-- Seleccione un género --</option>
            @foreach (var item in generos)
            {
                <option value="@item.ID">@item.Nombre</option>
            }
        </select>
    </div>

    <div class="col-sm-6" style="display:flex">
        <div class="form-check me-2">
            <input type="checkbox" class="form-check-input" id="estrenos" @bind="futurosEstrenos" />
            <label class="form-check-label" for="estrenos">Futuros Estrenos</label>
        </div>
        <div class="form-check me-2">
            <input type="checkbox" class="form-check-input" id="cartelera" @bind="enCartelera" />
            <label class="form-check-label" for="cartelera">Cartelera</label>
        </div>
        <div class="form-check me-2">
            <input type="checkbox" class="form-check-input" id="masVotadas" @bind="masVotadas" />
            <label class="form-check-label" for="masVotadas">Más Votadas</label>
        </div>
    </div>

    <div class="col-sm-12">
        <button type="button" class="btn btn-primary" @onclick="CargarNuevasPeliculas">Filtrar</button>
        <button type="button" class="btn btn-danger" @onclick="LimpiarOnClick">Limpiar</button>
    </div>

</div>

<PaginacionComponent PaginaActual="paginaActual" PaginasTotales="paginasTotales" PaginaSeleccionada="PaginaSeleccionada"></PaginacionComponent>

<ListadoPaliculasComponent Peliculas="Peliculas" />

@code {

    [Parameter][SupplyParameterFromQuery(Name = "pagina")] public int paginaActual { get; set; } = 1;
    [Parameter][SupplyParameterFromQuery(Name = "generoid")] public int generoSeleccionado { get; set; }
    [Parameter][SupplyParameterFromQuery(Name = "estrenos")] public bool futurosEstrenos { get; set; } = false;
    [Parameter][SupplyParameterFromQuery(Name = "titulo")] public string titulo { get; set; } = "";
    [Parameter][SupplyParameterFromQuery(Name = "encartelera")] public bool enCartelera { get; set; } = false;
    [Parameter][SupplyParameterFromQuery(Name = "masvotadas")] public bool masVotadas { get; set; } = false;

    private Dictionary<string, string> queryDictionary = new Dictionary<string, string>();
    private List<Genero> generos = new List<Genero>();
    public List<Pelicula> Peliculas { get; set; } = null!;

    public int paginasTotales { get; set; }
    public int paginaSeleccionada { get; set; }



    protected override async Task OnInitializedAsync()
    {
        if (paginaActual ==0){paginaActual = 1;}

        await ObtenerGeneros();
        var queryString = GenerarQueryString();
        await RealizarBusqueda(queryString);
    }

    private async Task RealizarBusqueda(string queryString)
    {
        var respuestaHttp = await repositorio.Get<List<Pelicula>>("api/peliculas/filtrar?" + queryString);
        paginasTotales = int.Parse(respuestaHttp.HttpResponseMessage!.Headers.GetValues("totalPaginas").FirstOrDefault()!);
        Peliculas = respuestaHttp.Response!;
    }

    private async Task ObtenerGeneros()
    {
        var respuestaHttp = await repositorio.Get<List<Genero>>("api/generos");
        generos = respuestaHttp.Response!;
    }

    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await CargarNuevasPeliculas();
    }

    private string GenerarQueryString()
    {
        if (queryDictionary is null)
        {
            queryDictionary = new Dictionary<string, string>();
        }

        queryDictionary["generoid"] = generoSeleccionado.ToString();
        queryDictionary["titulo"] = titulo ?? string.Empty;
        queryDictionary["encartelera"] = enCartelera.ToString();
        queryDictionary["estrenos"] = futurosEstrenos.ToString();
        queryDictionary["masvotadas"] = masVotadas.ToString();
        queryDictionary["pagina"] = paginaActual.ToString();

        //valores por defecto
        var valoresPorDefecto = new List<string> { "false", "", "0" };

        return string.Join("&", queryDictionary.Where(x =>
                                                       !valoresPorDefecto.Contains(x.Value.ToLower()))
                                                .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}")
                                                .ToArray());
    }

    private async Task TituloKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await CargarNuevasPeliculas();
        }
    }

    private async Task CargarNuevasPeliculas()
    {
        var queryString = GenerarQueryString();
        navigationManager.NavigateTo("/peliculas/buscar?" + queryString);
        await RealizarBusqueda(queryString);
    }

    private async Task LimpiarOnClick()
    {        
        titulo = "";
        generoSeleccionado = 0;
        futurosEstrenos = false;
        enCartelera= false;
        masVotadas= false;
        await CargarNuevasPeliculas();
    }


}
