@page "/pelicula/{PeliculaId:int}"
@page "/pelicula/{PeliculaId:int}/{NombrePelicula}"
@inject IRepositorio repositorio
@inject SweetAlertService swal

<h3>VisualizarPeliculaComponent</h3>

@if (modelo is null)
{
    <p>Cargando...</p>
}
else
{
    <h2>@modelo.Pelicula.Titulo ( @modelo.Pelicula.Lanzamiento!.Value.ToString("yyyy") )</h2>
    foreach (var genero in modelo.Generos!)
    {
        <a class="me-2 badge bg-primary rounded-pill text-decoration-none" href="peliculas/buscar?generoid=@genero.ID">@genero.Nombre</a>
    }

    <span>
        | @modelo.Pelicula.Lanzamiento!.Value.ToString("dd MM yyyy")
        | Promedio: @modelo.PromedioVotos.ToString("0.#")/5
        | Tu voto: <RatingComponent MaximoPuntage="5" PuntageSeleccionado="modelo.VotoUsuario" OnRating="OnRating"></RatingComponent>
    </span>

    <div class="d-flex mt-2">
        <span style="display: inline-block;" class="me-2">
            <img src="@modelo.Pelicula.Poster" style="width: 225px; height: 315px;"/>
        </span>

        <iframe width="560" height="315" src="https://www.youtube.com/embed/@modelo.Pelicula.Trailer" 
        title="YouTube video player" 
        frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

    </div>


    <div class="mt-2">
        <h3>Resumen</h3>
        <div>
            <MostrarMarkdownComponent ContenidoMarkdown="@modelo.Pelicula.Resumen"></MostrarMarkdownComponent>
        </div>
    </div>


    <div class="mt-2">
        <h3>Actores</h3>
        <div class="d-flex flex-column">
            @foreach (var actor in modelo.Actores!)
            {
                <div class="mb-2">
                    <img style="width: 50px;" src="@actor.Foto" />
                    <span style="display: inline-block; width: 200px;">@actor.Nombre</span>
                    <span style="display: inline-block; width: 45px;">...</span>                    
                    <span>@actor.Personaje</span>
                </div>
            }
        </div>
    </div>
}


@code {
    [Parameter] public int PeliculaId { get; set; }
    [Parameter] public string? NombrePelicula { get; set; }
    private PeliculaVisualizarDTO? modelo;

    protected override async Task OnInitializedAsync()
    {
        var repuestHttp = await repositorio.Get<PeliculaVisualizarDTO>($"api/peliculas/{PeliculaId}");

        if (repuestHttp.Error)
        {
            var mensajeError = await repuestHttp.ObtenerMensajeError();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            modelo = repuestHttp.Response;
        }

    }

    private async Task OnRating(int votoSeleccionado)
    {
        modelo!.VotoUsuario = votoSeleccionado;
        var vpDTO = new VotoPeliculaDTO()
            {
                PeliculaId = PeliculaId,
                Voto = votoSeleccionado
            };

        var respuestaHttp = await repositorio.Post("api/votos", vpDTO);

        if (respuestaHttp.Error)
        {
            var mensajeError = await respuestaHttp.ObtenerMensajeError();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            await swal.FireAsync("Éxito", "Su voto ha sido recibido", SweetAlertIcon.Success);
        }
    }

}
