@page "/usuarios"
@inject IRepositorio repositorio
@inject SweetAlertService swal

<h3>IndiceUsuariosPage</h3>

<PaginacionComponent PaginaActual="paginaActual" PaginasTotales="paginasTotales" PaginaSeleccionada="paginaSeleccionada"></PaginacionComponent>

<ListadoGenericoComponent Listado="Usuarios">
    <HayRegistrosCompleto>
        <table class="table">
            <thead>
                <tr>
                    <th></th>
                    <th>Usuario</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var usuario in Usuarios)
                {
                    <tr>
                        <td>
                            <a href="/usuarios/editar/@usuario.Id" class="btn btn-success">Editar</a>
                        </td>
                        <td>@usuario.Email</td>
                    </tr>
                }
            </tbody>
        </table>
    </HayRegistrosCompleto>
</ListadoGenericoComponent>

@code {
    private List<UsuarioDTO>? Usuarios;
    private int paginaActual = 1;
    private int paginasTotales;

    protected async override Task OnInitializedAsync()
    {
        await Cargar();
    }

    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await Cargar(pagina);
    }

    private async Task Cargar(int pagina = 1)
    {
        var respuestaHttp = await repositorio.Get<List<UsuarioDTO>>($"api/usuarios?pagina={pagina}");

        if (respuestaHttp.Error)
        {
            var mesajeError = await respuestaHttp.ObtenerMensajeError();
            await swal.FireAsync("Error", mesajeError, SweetAlertIcon.Error);
        }
        else
        {
            paginasTotales = int.Parse(respuestaHttp.HttpResponseMessage!.Headers.GetValues("totalPaginas").FirstOrDefault()!);
            Usuarios = respuestaHttp.Response;
        }
    }
}
