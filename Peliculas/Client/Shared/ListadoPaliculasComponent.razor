<div class="mt-3">

    @if (Peliculas is null)
    {
        @*     <img alt="Cargando"
    src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" /> *@


        if (CargandoRenderFragment == null)
        {
            <img alt="Cargando"
                 src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />
        }
        else
        {
            @CargandoRenderFragment
            ;
        }

    }
    else if (Peliculas.Count < 1)
    {
        @* <p>
    No hay películas para mostrar.
    </p> *@


        if (SinPeliculasRenderFragment is null)
        {
            <p>
                No hay películas para mostrar.
            </p>
        }
        else
        {
            @SinPeliculasRenderFragment
        }
    }
    else
    {
        <div>
            @* <input type="checkbox"  @onchange="@( ()=> MostrarBotones = !MostrarBotones )"/> *@
            <input type="checkbox" @bind="MostrarBotones" />
            <span>Mostrar botones</span>
        </div>

        @foreach (var pelicula in Peliculas)
        {
            <PeliculaComponent Pelicula=pelicula
                               MostrarBotones="MostrarBotones"
                               EliminarPelicula="ElininarPelicula" />
        }
    }
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(3000);
    }

    #region Parameters

    [Parameter]
    [EditorRequired]
    public List<Pelicula>? Peliculas { get; set; }

    /*Es la forma de declarar un RenderFragment por default*/
    // [Parameter]
    // public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public RenderFragment? CargandoRenderFragment { get; set; }

    [Parameter]
    public RenderFragment? SinPeliculasRenderFragment { get; set; }

    #endregion


    bool MostrarBotones = false;

    private void ElininarPelicula(Pelicula pelicula)
    {
        Peliculas!.Remove(pelicula);
    }




}
