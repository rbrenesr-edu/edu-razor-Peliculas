@inject IJSRuntime js;

<div class="mt-3">

    <div>
        @* <input type="checkbox"  @onchange="@( ()=> MostrarBotones = !MostrarBotones )"/> *@
        <input type="checkbox" @bind="MostrarBotones" />
        <span>Mostrar botones</span>
    </div>

    <ListadoGenericoComponent Listado="Peliculas">
        <HayRegistros Context="pelicula">
            <PeliculaComponent Pelicula=pelicula
                               MostrarBotones="MostrarBotones"
                               EliminarPelicula="ElininarPelicula" />
        </HayRegistros>
    </ListadoGenericoComponent>

</div>

@code {

    #region Parameters

    [Parameter]
    [EditorRequired]
    public List<Pelicula>? Peliculas { get; set; }

    /*Es la forma de declarar un RenderFragment por default*/
    // [Parameter]
    // public RenderFragment? ChildContent { get; set; }


    #endregion


    bool MostrarBotones = false;

    public void LimpiarPeliculas()
    {
        if (Peliculas is not null)
        {
            Peliculas.Clear();
        }
    }

    private async Task ElininarPelicula(Pelicula pelicula)
    {
        bool confirmado = await js.Confirm($"Desea borrar la pelicula {pelicula.Titulo } ?");
        js.Clg("Texto");

        if (confirmado)
        {
            Peliculas!.Remove(pelicula);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(3000);
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("OnInitialized");
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("OnParametersSet");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("OnAfterRender: Primera vez" + firstRender);
    }

    protected override bool ShouldRender()
    {
        Console.WriteLine("ShouldRender");
        //return base.ShouldRender();
        return true;
    }
}
