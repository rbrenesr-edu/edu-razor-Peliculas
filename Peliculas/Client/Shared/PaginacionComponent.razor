
<nav>
    <ul class="pagination justify-content-center">

        @foreach (var enlace in Enlaces)
        {
            <li @onclick=@(()=>PaginaSeleccionadaInterno(enlace))
                style="cursor: pointer"
                class="page-item 
                    @(enlace.Habilitada ? null : "disabled")
                    @(enlace.Activa ? "active" : null)">
                <a class="page-link">@enlace.Texto</a>
            </li>
        }


       


    </ul>
</nav>

@code {
    [Parameter] public int PaginaActual { get; set; } = 1;
    [Parameter] public int PaginasTotales { get; set; }
    [Parameter] public int Radio { get; set; } = 3;
    [Parameter] public EventCallback<int> PaginaSeleccionada { get; set; }
    private List<PaginaModel> Enlaces = new List<PaginaModel>();


    protected override void OnParametersSet()
    {
        Enlaces = new List<PaginaModel>();

        var enlaceAnteriorHabilitada = PaginaActual != 1;
        var enlaceAnteriorPagina = PaginaActual - 1;

        Enlaces.Add(new PaginaModel
            {
                Texto = "Anterior",
                Pagina = enlaceAnteriorPagina,
                Habilitada = enlaceAnteriorHabilitada
            });

        for (int i = 1; i <= PaginasTotales; i++)
        {
            if (PaginaActual - Radio <= i && i <= PaginaActual + Radio)
            {
                Enlaces.Add(new PaginaModel
                    {
                        Texto = i.ToString(),
                        Pagina = i,
                        Activa = PaginaActual == i
                    });
            }
        }

        var enlaceSiguienteHabilitada = PaginaActual != PaginasTotales;
        var enlaceSiguientePagina = PaginaActual + 1;

        Enlaces.Add(new PaginaModel
            {
                Texto = "Siguiente",
                Pagina = enlaceSiguientePagina,
                Habilitada = enlaceSiguienteHabilitada
            });

    }

    private async Task PaginaSeleccionadaInterno(PaginaModel paginaModel)
    {
        if (paginaModel.Pagina == PaginaActual)
        {
            return;
        }     

        if (!paginaModel.Habilitada)
        {
            return;
        }

        await PaginaSeleccionada.InvokeAsync(paginaModel.Pagina);

    }

    class PaginaModel
    {
        public string Texto { get; set; } = null!;
        public int Pagina{ get; set; }
        public bool Habilitada { get; set; } = true;
        public bool Activa { get; set; } = false;
    }
}
